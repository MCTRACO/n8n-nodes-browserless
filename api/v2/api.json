[{"data":[{"yml":"openapi: 3.0.0\ninfo:\n  title: Browserless.io API\n  version: v2\nservers:\n  - url: https://production-sfo.browserless.io\n    description: Server in production at SFO\n  - url: https://production-lon.browserless.io\n    description: Server in production at LON\npaths:\n  /content:\n    post:\n      summary: Content API\n      description: Allows for simple navigation to a site and capturing the page's content (including the `<head>` section).\n      parameters:\n        - in: query\n          name: token\n          schema:\n            type: string\n          description: API token\n          required: true\n      requestBody:\n        description: URL should be given in request body\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  type: string\n                  description: URL to navigate to\n                rejectResourceTypes:\n                  type: array\n                  items:\n                    type: string\n                  description: Types to be rejected\n                rejectRequestPattern:\n                  type: array\n                  items:\n                    type: string\n                  description: Patterns to reject\n                gotoOptions:\n                  type: object\n                  properties:\n                    waitUntil:\n                      type: string\n                      description: Puppeteer's GoToOptions interface\n                bestAttempt:\n                  type: boolean\n                  description: Make Browserless attempt to proceed when async events fail or timeout\n                waitForSelector:\n                  type: object\n                  properties:\n                    selector:\n                      type: string\n                    description: Valid CSS selector\n                    timeout:\n                      type: integer\n                      description: Maximum number of milliseconds to wait for the selector\n                    hidden:\n                      type: string\n                      description: Wait for the selected element to not be found in the DOM or to be hidden\n                    visible:\n                      type: string\n                      description: Wait for the selected element to be present in DOM and to be visible\n                waitForEvent:\n                  type: object\n                  properties:\n                    event:\n                      type: string\n                      description: Event to wait for\n                    timeout:\n                      type: integer\n                      description: Maximum number of milliseconds to wait for the event\n                waitForFunction:\n                  type: object\n                  properties:\n                    fn:\n                      type: string\n                      description: Wait for the function to return. Can be any valid JavaScript or EcmaScript function.\n                    timeout:\n                      type: integer\n                      description: Maximum number of milliseconds to wait for the function\n      responses:\n        '200':\n          description: Page's HTML after it has been rendered and evaluated inside the browser\n          content:\n            text/html:\n              schema:\n                type: string\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: Browserless.io API\n  version: v2\nservers:\n  - url: 'https://production-sfo.browserless.io'\n  - url: 'https://production-lon.browserless.io'\npaths:\n  /download:\n    post:\n      summary: Download a file created in the browser.\n      description: >-\n        The /download API is used for returning files Chrome has downloaded during the execution of puppeteer code, which is ran inside context of the browser.\n      requestBody:\n        content:\n          application/javascript:\n            schema:\n              type: string\n              example: >-\n                export default function ({ page }){\n                  await page.evaluate(() => {\n                    const json = {\n                      ping: \"pong\",\n                      rnd: [...Array(5)].map(() => Math.random())\n                    }\n                    const jsonContent = `data:application/json,${JSON.stringify(json)}`;\n                    const encodedUri = encodeURI(jsonContent);\n                    const link = document.createElement(\"a\");\n                    link.setAttribute(\"href\", encodedUri);\n                    link.setAttribute(\"download\", \"data.json\");\n                    document.body.appendChild(link);\n                    return link.click();\n                  });\n                }\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  type: string\n                  description: The custom download code.\n                context:\n                  type: object\n                  description: Value used to pass context values and arguments to the `code`.  \n              example: \n                code: \"export default async function({page:t,context:a}){await t.evaluate(t=>{let a={url:t.url,ping:`pong`,rnd:[...Array(t.arrayLen)].map(()=>Math.random())},e=`data:application/json,${JSON.stringify(a)}`,n=encodeURI(e),r=document.createElement(`a`);return r.setAttribute(`href`,n),r.setAttribute(`download`,`data.json`),document.body.appendChild(r),r.click()},a)};\"\n                context: \n                  url: \"https://browserless.io/\"\n                  arrayLen: 10              \n\n      responses:\n        '200':\n          description: File downloaded successfully. Response will contain the appropriate content-type header.\n        '400':\n          description: Bad Request. This usually happens when the download request doesn't result in a file being downloaded.\nsecurity:\n  - APIKey: []\n\nsecuritySchemes:\n  APIKey:\n    type: apiKey\n    name: token\n    in: query\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: Function API\n  version: v2\n  description: A quick way to run commands with Browserless is via our `/function` API.\n\nservers:\n  - url: https://production-sfo.browserless.io\n    description: production-sfo endpoint\n  - url: https://production-lon.browserless.io\n    description: production-lon endpoint\n\npaths:\n  /function:\n    post:\n      summary: Executes custom puppeteer code\n      description: Allows for `POST`ing of custom code and context to run them.\n      requestBody:\n        required: true\n        content: \n          application/javascript:\n            schema:\n              type: string\n              description: JavaScript code to be executed, exporting an async function.\n              example: |\n                export default async function ({ page }) {\n                  const rndNumber = () => {\n                    return Math.floor(Math.random() * (10**6 - 0));\n                  };\n                \n                  await page.goto(\"https://example.com/\");\n                  const url = await page.title();\n                  const numbers = [...Array(5)].map(() => rndNumber());\n                \n                  return {\n                    data: {\n                      url,\n                      numbers,\n                    },\n                    type: \"application/json\",\n                  };\n                }\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  type: string\n                  description: JavaScript code to be executed, exporting an async function.\n                  example: |\n                    import{faker as a}from\\\"https://esm.sh/@faker-js/faker\\\";export default async function({context:o}){let t=a.internet,e=[...Array(o.len)].map(()=>({domain:t.domainName(),ip:t.ip(),mac:t.mac(),protocol:t.protocol()}));return{data:{domains:e,length:o.len},type:`application/json`}};\n                context:\n                  type: object\n                  description: Context values and arguments used in the code\n                  example:\n                    len: 10\n      responses:\n        '200':\n          description: Successful execution\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    description: Whatever data returned by the function\n                    example: \n                      url: Example Domain\n                      numbers: [854246, 114512, 212580, 482122, 107878]\n                  type:\n                    type: string\n                    description: Content type of the data\n                    example: application/json\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: Browserless.io API\n  version: 2.0.0\nservers:\n  - url: https://production-sfo.browserless.io\n  - url: https://production-lon.browserless.io\npaths:\n  /pdf:\n    post:\n      parameters:\n        - in: query\n          name: token\n          required: true\n          schema: \n            type: string\n            example: MY_API_TOKEN\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: \n              type: object\n              properties:\n                url:\n                  type: string\n                  example: \"https://example.com/\"\n                html:\n                  type: string\n                  example: \"<h1>Hello World!</h1>\"\n                options:\n                  type: object\n                  properties:\n                    displayHeaderFooter:\n                      type: boolean\n                      example: true\n                    printBackground:\n                      type: boolean\n                      example: false\n                    format:\n                      type: string\n                      example: \"A0\"\n                addScriptTag:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      url:\n                        type: string\n                        example: \"https://code.jquery.com/jquery-3.7.1.min.js\"\n                      content:\n                        type: string\n                        example: \"document.querySelector(`h1`).innerText = `Hello Word!`\"\n                addStyleTag:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      content:\n                        type: string\n                        example: \"body { height: 100vh;  background: linear-gradient(45deg, #da5a44, #a32784);}\"\n                      url:\n                        type: string\n                        example: \"https://interactive-examples.mdn.mozilla.net/live-examples/css-examples/text-decoration/text-decoration-color.css\"\n                rejectResourceTypes:\n                  type: array\n                  items:\n                    type: string\n                    example: \"image\"\n                rejectRequestPattern:\n                  type: array\n                  items:\n                    type: string\n                    example: \"/^.*\\\\.(css)\"\n                gotoOptions:\n                  type: object\n                  properties:\n                    waitUntil:\n                      type: string\n                      example: \"networkidle2\"\n                bestAttempt:\n                  type: boolean\n                  example: true\n                waitForEvent:\n                  type: object\n                  properties:\n                    event:\n                      type: string\n                      example: \"fullscreenchange\"\n                    timeout:\n                      type: number\n                      example: 5000\n                waitForFunction:\n                  type: object\n                  properties:\n                    fn:\n                      type: string\n                      example: \"async()=>{let t=await fetch('https://jsonplaceholder.typicode.com/todos/1'),e=await t.json();document.querySelector('h1').innerText=e.title}\"\n                    timeout:\n                      type: number\n                      example: 5000\n                waitForSelector:\n                  type: object\n                  properties:\n                    selector:\n                      type: string\n                      example: \"h1\"\n                    timeout:\n                      type: number\n                      example: 5000\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/pdf: {}\n"},{"yml":"openapi: 3.0.0\ninfo:\n  version: v2\n  title: Browserless.io \n  description: Screenshot API\n\nservers:\n  - url: https://production-sfo.browserless.io/\n  - url: https://production-lon.browserless.io/\n\npaths:\n  /screenshot:\n    post:\n      summary: Takes a screenshot of specified URL.\n      description: The screenshot API allows for simple navigation to a site and capturing a screenshot. This API exposes most of puppeteer's screenshot API through the posted JSON payload.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: \n                url: \n                  type: string\n                  description: The URL to navigate to and capture a screenshot\n                options: \n                  type: object\n                  description: Options available via puppeteer's Page.screenshot() method\n                  properties:\n                    fullPage:\n                      type: boolean\n                      description: When true, takes a screenshot of the full scrollable page\n                    type:\n                      type: string\n                      description: Specifies the image format of the output\n                      enum: [jpeg, png, webp]\n                addScriptTag:\n                  type: array\n                  description: Additional scripts to load\n                  items:\n                    type: object\n                    properties:\n                      url:\n                        type: string\n                      content:\n                        type: string\n                addStyleTag:\n                  type: array\n                  description: Additional styles to load\n                  items:\n                    type: object\n                    properties:\n                      url:\n                        type: string\n                      content:\n                        type: string\n                rejectResourceTypes:\n                  type: array\n                  description: Block undesired resource types\n                  items:\n                    type: string\n            \n            examples:\n              example-1: \n                value:\n                  url: \"https://example.com/\"\n                  options: \n                    fullPage: true\n                    type: \"png\"\n      responses: \n        '200':\n          description: Successfully Captured Screenshot.\n          content: \n            application/json: \n              schema: \n                type: object\n                properties: \n                  message: \n                    type: string\n                    example: \"Screenshot captured successfully.\"\n        '400':\n          description: Invalid Request.\n          content: \n            application/json: \n              schema: \n                type: object\n                properties: \n                  message:\n                    type: string\n                    example: \"Invalid payload schema.\"\n"},{"yml":"openapi: 3.0.0\n\ninfo:\n  title: Browserless.io -  / unblock API v2\n  version: v2\n\nservers:\n  - url: https://production-sfo.browserless.io\n  - url: https://production-lon.browserless.io\n\npaths:\n  /unblock:\n    post:\n      summary: Unblock a webpage\n      requestBody:\n        required: true\n        content:\n          application/json: \n            schema: \n              type: object\n              properties:\n                url:\n                  type: string\n                  example: \"https://example.com\"\n                browserWSEndpoint:\n                  type: boolean\n                  example: true\n                cookies:\n                  type: boolean\n                  example: true\n                content:\n                  type: boolean\n                  example: false\n                screenshot:\n                  type: boolean\n                  example: false\n                ttl:\n                  type: integer\n                  example: 30000\n                waitForEvent:\n                  type: object\n                  properties:\n                    event:\n                      type: string\n                      example: \"fullscreenchange\"\n                    timeout:\n                      type: integer\n                      example: 5000\n                waitForFunction:\n                  type: object\n                  properties:\n                    fn: \n                      type: string\n                      example: \"async() => {...}\"\n                    timeout:\n                      type: integer\n                      example: 5000\n                waitForSelector:\n                  type: object\n                  properties:\n                    selector: \n                      type: string\n                      example: \"h1\"\n                    timeout:\n                      type: integer\n                      example: 5000\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  browserWSEndpoint:\n                    type: string\n                    example: \"wss://production-sfo.browserless.io/...\"\n                  content:\n                    type: string\n                  cookies:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                        value:\n                          type: string\n                        domain:\n                          type: string\n                        path:\n                          type: string\n                        secure:\n                          type: boolean\n                        httpOnly:\n                          type: boolean\n                  screenshot:\n                    type: string\n                  ttl:\n                    type: integer\n                    example: 30000\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: /scrape API\n  version: v2\n  description: >\n    This API checks the content of a page and returns a structured JSON response, \n    based on the specified selectors.\n    Note: If this API gets blocked by bot detectors, consider using /unblock API.\n\npaths:\n  /scrape:\n    post:\n      operationId: scrapePage\n      parameters:\n        - in: query\n          name: token\n          schema:\n            type: string\n          required: true\n          description: API Token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  type: string\n                  description: webpage URL\n                elements:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      selector:\n                        type: string\n                  description: HTML element selector\n                gotoOptions:\n                  type: object\n                  properties:\n                    timeout:\n                      type: integer\n                      description: navigation timeout in milliseconds\n                    waitUntil:\n                      type: string\n                      description: wait until event (optional)\n                waitFor:\n                  type: integer\n                  description: wait for a given number of milliseconds before continue execution. (optional)\n                waitForSelector:\n                  type: object\n                  properties:\n                    selector:\n                      type: string\n                    timeout:\n                      type: integer\n                  description: wait for a selector to appear in page. (optional)\n                waitForFunction:\n                  type: object\n                  properties:\n                    fn:\n                      type: string\n                    timeout:\n                      type: integer\n                  description: waits for the provided function to return before continue. (optional) \n                waitForEvent:\n                  type: object\n                  properties:\n                    event:\n                      type: string\n                    timeout:\n                      type: integer\n                  description: waits for an event to happen on the page before continue. (optional)\n      responses:\n        '200':\n          description: The content of webpage based on the specified selectors.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        selector:\n                          type: string\n                        results:\n                          type: array\n                          items:\n                            type: object\n                            properties:\n                              attributes:\n                                type: array\n                                items:\n                                  $ref: '#/components/attributes'\n                              height:\n                                type: integer\n                              html:\n                                type: string\n                              left:\n                                type: integer\n                              text:\n                                type: string\n                              top:\n                                type: integer\n                              width:\n                                type: integer\n      x-codeSamples:\n        - lang: cURL\n          source: >\n            curl -X POST \\\n              https://production-sfo.browserless.io/scrape?token=MY_API_TOKEN \\\n              -H 'Cache-Control: no-cache' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"url\": \"https://example.com/\",\n              \"elements\": [\n                { \"selector\": \"h1\" }\n              ],\n              \"gotoOptions\": {\n                \"timeout\": 10000,\n                \"waitUntil\": \"networkidle2\"\n              }\n            }'\ncomponents:\n  attributes:\n    type: object\n    properties:\n      name:\n        type: string\n      value:\n        type: string\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: Performance API\n  description: The performance API reveals key metrics about a site's accessibility, best practices, performance, PWA information, and SEO, from a performance standpoint.\n  version: \"2.0\"\nservers:\n  - url: \"https://production-sfo.browserless.io\"\n    description: For hosted plan\npaths:\n  /performance:\n    post:\n      summary: Gather site performance data\n      description: \"This API is used to gather performance metrics about a website. It is powered by Google's Lighthouse project and is compatible with its CLI options. Due to the number of checks gathered, it can take from several seconds to minutes depending on the site and size of the worker.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url: \n                  type: string\n                  description: The URL of the website to gather performance metrics from\n                config:\n                  type: object\n                  description: Specifies the options for the performance data gathering\n                  properties:\n                    extends:\n                      type: string\n                      default: \"lighthouse:default\"\n                    settings:\n                      type: object\n                      properties:\n                        onlyCategories:\n                          type: array\n                          items:\n                            type: string\n                            description: Categories to gather metrics from\n                        onlyAudits:\n                          type: string\n                          description: A specific audit to gather metrics from\n      responses:\n        '200':\n          description: Successfully gathered the performance metrics.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  audits:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        title:\n                          type: string\n                        score:\n                          type: number\n                        displayValue:\n                          type: string\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: Browserless Sessions API\n  version: 'v2'\nservers:\n  - url: 'https://production-sfo.browserless.io/'\n  - url: 'https://production-lon.browserless.io/'\npaths:\n  /sessions:\n    get:\n      summary: 'Gather information about currently running sessions'\n      description: 'This API is only available for dedicated and self-hosted accounts. It will show information of the current running sessions'\n      parameters:\n        - in: query\n          name: token\n          schema:\n            type: string\n          description: 'API token'\n          required: true\n      responses:\n        '200':\n          description: 'List of sessions'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                    initialConnectURL:\n                      type: string\n                    isTempDataDir:\n                      type: boolean\n                    launchOptions:\n                      type: object\n                    numbConnected:\n                      type: number\n                    routePath:\n                      type: array\n                      items:\n                        type: string\n                    startedOn:\n                      type: number\n                    ttl:\n                      type: number\n                    userDataDir:\n                      type: string\n                    browser:\n                      type: string\n                    browserId:\n                      type: string\n                    killURL:\n                      type: string\n                    running:\n                      type: boolean\n                    timeAliveMs:\n                      type: number\n                    type:\n                      type: string\n              examples:\n                sessionInfo:\n                  value:\n                    - id: null\n                      initialConnectURL: \"http://production-sfo.browserless.io/firefox/playwright/?token=GOES-HERE\"\n                      isTempDataDir: true\n                      launchOptions: {}\n                      numbConnected: 1\n                      routePath: [\"/firefox/playwright\", \"/firefox/playwright\"]\n                      startedOn: 1709584439748\n                      ttl: 0\n                      userDataDir: null\n                      browser: \"FirefoxPlaywright\"\n                      browserId: \"d9a8570a73666d79d79ac23f07cf8966\"\n                      killURL: null\n                      running: true\n                      timeAliveMs: 10118\n                      type: \"browser\"\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: Browserless API\n  version: v2\nservers:\n  - url: https://production-sfo.browserless.io\n  - url: https://production-lon.browserless.io\npaths:\n  /config:\n    get:\n      summary: Get your worker's configuration\n      description: The `/config` API will give you information about your worker's configuration, **and is only available for dedicated and self-hosted accounts**\n      parameters:\n        - in: query\n          name: token\n          required: true\n          schema:\n            type: string\n            example: MY_API_TOKEN\n      responses:\n        '200':\n          description: Worker's configuration\n          content:\n            application/json:\n              schema:\n                properties:\n                  allowCORS:\n                    type: boolean\n                    example: true\n                  allowFileProtocol:\n                    type: boolean\n                    example: false\n                  allowGetCalls:\n                    type: boolean\n                    example: false\n                  concurrent:\n                    type: integer\n                    example: 10\n                  data:\n                    type: string\n                    example: \"/tmp/browserless-data-dirs\"\n                  debug:\n                    type: string\n                    example: \"browserless*,-**:verbose\"\n                  errorAlertURL:\n                    type: string\n                    example: null\n                  healthFailureURL:\n                    type: string\n                    example: null\n                  host:\n                    type: string\n                    example: \"localhost\"\n                  maxCPU:\n                    type: integer\n                    example: 99\n                  maxMemory:\n                    type: integer\n                    example: 99\n                  metricsJSONPath:\n                    type: string\n                    example: \"/tmp/browserless-metrics.json\"\n                  port:\n                    type: integer\n                    example: 3001\n                  queued:\n                    type: integer\n                    example: 10\n                  queuedAlertURL:\n                    type: string\n                    example: null\n                  rejectAlertURL:\n                    type: string\n                    example: null\n                  retries:\n                    type: integer\n                    example: 5\n                  timeout:\n                    type: integer\n                    example: 30000\n                  timeoutAlertURL:\n                    type: string\n                    example: null\n                  token:\n                    type: string\n                    example: \"6R0W53R135510\"\n"},{"yml":"openapi: 3.0.0\ninfo:\n  title: Browserless.io API\n  version: v2\n\nservers:\n  - url: https://production-sfo.browserless.io/\n  - url: https://production-lon.browserless.io/\n\npaths:\n  /metrics:\n    get:\n      summary: Get metrics of the session\n      parameters:\n        - name: token\n          in: query\n          required: false\n          schema:\n            type: string\n            default: MY_API_TOKEN\n          description: API token to authenticate the request\n      responses:\n        default:\n          description: A list of session statistics \n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    error:\n                      type: integer\n                      example: 3\n                    maxConcurrent:\n                      type: integer\n                      example: 4\n                    queued:\n                      type: integer\n                      example: 0\n                    rejected:\n                      type: integer\n                      example: 0\n                    running:\n                      type: integer\n                      example: 3\n                    sessionTimes:\n                      type: array\n                      items:\n                        type: integer\n                      example: [992, 1041, 802]\n                    successful:\n                      type: integer\n                      example: 0\n                    timedout:\n                      type: integer\n                      example: 0\n                    unauthorized:\n                      type: integer\n                      example: 0\n                    unhealthy:\n                      type: integer\n                      example: 0\n                    maxTime:\n                      type: integer\n                      example: 1041\n                    meanTime:\n                      type: integer\n                      example: 945\n                    minTime:\n                      type: integer\n                      example: 802\n                    totalTime:\n                      type: integer\n                      example: 2835\n                    units:\n                      type: integer\n                      example: 3\n                    date:\n                      type: integer\n                      example: 1709134233732\n                    cpu:\n                      type: number\n                      format: double\n                      example: 0.024877870173220466\n                    memory:\n                      type: number\n                      format: double\n                      example: 0.7784158564199399\n\n  /metrics/total:\n    get:\n      summary: Get total metrics of all the sessions\n      parameters:\n        - name: token\n          in: query\n          required: false\n          schema:\n            type: string\n            default: MY_API_TOKEN\n          description: API token to authenticate the request\n      responses:\n        default:\n          description: Total session statistics\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1metrics/get/responses/default/content/application~1json/schema'\n"}]}]
